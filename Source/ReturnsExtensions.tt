<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".Generated.cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System.Linq" #>
#if !NET3x
using System;
using System.Threading.Tasks;
using Moq.Language;
using Moq.Language.Flow;

namespace Moq
{
    /// <summary>
    /// Defines async extension methods on IReturns.
    /// </summary>
	public static class GeneratedReturnsExtensions
	{
        /// <summary>
		/// Allows to specify the return value of an asynchronous method.
		/// </summary>
		public static IReturnsResult<TMock> ReturnsAsync<T, TMock, TResult>(this IReturns<TMock, Task<TResult>> mock, Func<T, TResult> value) where TMock : class
		{
			return mock.Returns((T t) => Task.FromResult(value(t)));
		}	
		<# 
		for (var argumentCount = 2; argumentCount <= 15; ++argumentCount)
		{ #> 
        /// <summary>
		/// Specifies a function that will calculate the value to return from the method, 
		/// retrieving the arguments for the invocation.
		/// </summary>
		public static IReturnsResult<TMock> ReturnsAsync<<#
			for (var i = 1; i <= argumentCount; ++i)
			{
				#>T<#=i#>, <#
			}#>TMock, TResult>(this IReturns<TMock, Task<TResult>> mock, Func<<#
			for (var i = 1; i <= argumentCount; ++i)
			{
				#>T<#=i#>, <#
			}#>TResult> value) where TMock : class
		{
			return mock.Returns((<#
			for (var i = 1; i <= argumentCount; ++i)
			{ #>T<#=i#> t<#=i#><#
				if(i != argumentCount) {#>, <#}#><#
			}#>) => Task.FromResult(value(<#
			for (var i = 1; i <= argumentCount; ++i)
			{
				#>t<#=i#><#
				if (i != argumentCount) { #>, <#}#><#
			}#>)));
		}
<#
		}
		#>
	}
}
#endif